left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))
bike_orderlines_joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
bike_orderlines_joined_tbl %>% glimpse()
bike_orderlines_wrangled_city_separated_tbl <- bike_orderlines_joined_tbl %>%
# 5.1 Separate category name
separate(col    = category,
into   = c("category.1", "category.2", "category.3"),
sep    = " - ") %>%
# Separate city and state
separate(col    = location,
into   = c("City", "State"),
sep    = ", ")%>%
# 5.2 Add the total price (price * quantity)
# Add a column to a tibble that uses a formula-style calculation of other columns
mutate(total.price = quantity* price) %>%
# 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns
# 5.3.1 by exact column name
select(-...1, -gender) %>%
# 5.3.2 by a pattern
# You can use the select_helpers to define patterns.
# Type ?ends_with and click on Select helpers in the documentation
select(-ends_with(".id"))%>%
# 5.3.3 Actually we need the column "order.id". Let's bind it back to the data
bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>%
# 5.3.4 You can reorder the data by selecting the columns in your desired order.
# You can use select_helpers like contains() or everything()
select(order.id, contains("order"), contains("model"), contains("category"),
price, quantity, total.price,
everything()) %>%
# 5.4 Rename columns because we actually wanted underscores instead of the dots
# (one at the time vs. multiple at once)
rename(bikeshop = name) %>%
set_names(names(.) %>% str_replace_all("\\.", "_"))
```
## Sales by Year and State
### Step 1 - Manipulate
```{r}
sales_by_state_year_tbl <-bike_orderlines_wrangled_city_separated_tbl %>%
select(order_date, total_price, State) %>%
mutate(year = year(order_date)) %>%
group_by(State, year) %>%
summarise(sales = sum(total_price)) %>%
ungroup() %>%
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " ???"))
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title    = "States revenue by year",
x = "", # Override defaults for x and y
y = "Revenue"
)
```
### Step 2 - Visualize
```{r}
sales_by_state_year_tbl%>%
ggplot(aes(x = year, y = sales, fill = State)) +
geom_col() + # Run up to here to get a stacked bar plot
facet_wrap(~ State) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " ???")) +
labs(
title = "Revenue by State and year",
subtitle = "Each product category has an upward trend",
fill = "State" # Changes the legend name
)
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title    = "States revenue by year",
x = "", # Override defaults for x and y
y = "Revenue"
)
```
## Writing Files
### Excel
```{r}
library("writexl")
sales_by_state_year_tbl %>%
write_xlsx("DS_101/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx")
```
### CSV
```{r}
sales_by_state_year_tbl%>%
write_csv("DS_101/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv")
```
### RDS
```{r}
sales_by_state_year_tbl %>%
write_rds("DS_101/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds")
```
# Data Acquisition: Challenge
## importing libraries
```{r}
library(RSQLite)
library(dplyr)
library(httr)
library(glue)
library(jsonlite)
library(keyring)
library(rvest)
library(owmr)
library(stringr)
library(purrr)
library(xopen)
library(stringi)
library(tibble)
```
## Task_1
```{r}
resp = GET("http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=a1e8fec679a9d4e32d525dc165c0af27")
rawToChar(resp$content)
content(resp, as = "text")
# first of all you have to set up your api key
OWM_API_KEY="a1e8fec679a9d4e32d525dc165c0af27"
owmr_settings(OWM_API_KEY)
(Alexandria_Egypt <- search_city_list("Alexandria","EG")) %>%
as.list()
Alexandria_EG_forecast <- get_forecast("London", units = "metric") %>%
owmr_as_tibble()
Alexandria_EG_forecast[, 1:10]
```
## Task_2
```{r}
#Wrap it into a function
url= "https://www.rosebikes.de/fahrr√§der/mtb"
get_bike_data <- function(url) {
html_bike_category <- read_html(url)
# Get the URLs
bike_url_tbl  <- html_bike_category %>%
html_nodes(css = ".catalog-category-bikes__title-text") %>%
html_text()%>%
enframe(name = "No.", value = "Bike.Name")
bike_database_tbl<-bike_url_tbl%>%
mutate(price=html_bike_category%>%
html_nodes(css =".catalog-category-bikes__price-title")%>%
html_text())
}
bike_tableout<-get_bike_data(url)
bike_tableout
saveRDS(bike_tableout,"Data_Acquisition_Challenge.rds")
```
# Data Visualization
## Challenge(2)
### importing libraries
```{r}
library(tidyverse)
library(randomcoloR)
```
### importing data
```{r}
covid_data_tbl <- read_csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
View(covid_data_tbl)
xlab=month.abb[1:12]
ylab=c(5,10,15,20,25)
continents=unique(covid_data_tbl$continentExp)
```
### Grouping data
```{r}
grouped1 <- covid_data_tbl %>%
select(month, cases, continentExp) %>%
group_by(month,continentExp) %>%
summarize(
cases = sum(cases),
) %>%
ungroup()
colnames(grouped1)=c("month","continents","cases")
grouped2=data.frame(continents=rep(continents,12),stringsAsFactors = F)
grouped2=grouped2[order(grouped2$continents),]
grouped2=as.data.frame(cbind(grouped2,rep(1:12,length(continents))))
colnames(grouped2)=c("continents","month")
grouped2=merge.data.frame(grouped2,grouped1,all=T)
grouped2[is.na(grouped2)]=0
grouped3<- grouped2%>%
select(month, cases, continents) %>%
group_by(continents) %>%
summarize(
cumulativeCases = cumsum(cases),
) %>%
select(cumulativeCases, continents) %>%
ungroup()
grouped3=as.data.frame(cbind(grouped3,rep(1:12,length(continents))))
colnames(grouped3)=c("cumulativeCases","continents","month")
View(grouped3)
```
### Plotting
```{r}
ggplot(data=grouped3,
aes(x=month,y=cumulativeCases,col=continents),group=continents)+
geom_line()+
scale_x_continuous(name="Year 2020",breaks = 1:12,labels=xlab)+
theme(axis.text.x = element_text(angle=45,hjust=1),axis.text.x.bottom =element_text(xlab))+
scale_y_continuous(expand=c(0,0),name="Cumulative Cases",labels=paste0(ylab,"M"),breaks=10^6*ylab,limits = c(0,17.5e6))+
scale_color_manual(values=randomColor(length(continents)))+
labs(x="Year 2020",
y="Cumulative Cases",
title="COVID-19 confirmed cases worldwide\nAs of 11/02/2020, Europe had more cases than USA")+
theme(plot.title = element_text(face="bold",hjust=0,vjust=2.12,size=7),plot.caption = element_text(face="bold.italic"))
```
LAB_KEY  <- "bahi"
---
title: "Journal (reproducible report)"
author: "Moamen Elbahy"
date: "2020-11-05"
output:
html_document:
toc: true
toc_float: true
collapsed: false
number_sections: true
toc_depth: 3
code_folding: hide
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=TRUE)
```
# Intro to the tidyverse: Challenge
## importing libraries
```{r}
library(tidyverse)
library(readxl)
library(lubridate)
library("writexl")
```
## importing data
```{r}
bikes_tbl <- readxl:: read_excel(path = "DS_101/00_data/01_bike_sales/01_raw_data/bikes.xlsx")
orderlines_tbl <- readxl::read_excel("DS_101/00_data/01_bike_sales/01_raw_data/orderlines.xlsx")
bikeshops_tbl  <- readxl::read_excel("DS_101/00_data/01_bike_sales/01_raw_data/bikeshops.xlsx")
```
## Examining Data
```{r}
orderlines_tbl
glimpse(orderlines_tbl)
```
## Joining Data
```{r}
left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))
bike_orderlines_joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
bike_orderlines_joined_tbl %>% glimpse()
bike_orderlines_wrangled_city_separated_tbl <- bike_orderlines_joined_tbl %>%
# 5.1 Separate category name
separate(col    = category,
into   = c("category.1", "category.2", "category.3"),
sep    = " - ") %>%
# Separate city and state
separate(col    = location,
into   = c("City", "State"),
sep    = ", ")%>%
# 5.2 Add the total price (price * quantity)
# Add a column to a tibble that uses a formula-style calculation of other columns
mutate(total.price = quantity* price) %>%
# 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns
# 5.3.1 by exact column name
select(-...1, -gender) %>%
# 5.3.2 by a pattern
# You can use the select_helpers to define patterns.
# Type ?ends_with and click on Select helpers in the documentation
select(-ends_with(".id"))%>%
# 5.3.3 Actually we need the column "order.id". Let's bind it back to the data
bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>%
# 5.3.4 You can reorder the data by selecting the columns in your desired order.
# You can use select_helpers like contains() or everything()
select(order.id, contains("order"), contains("model"), contains("category"),
price, quantity, total.price,
everything()) %>%
# 5.4 Rename columns because we actually wanted underscores instead of the dots
# (one at the time vs. multiple at once)
rename(bikeshop = name) %>%
set_names(names(.) %>% str_replace_all("\\.", "_"))
```
## Sales by Year and State
### Step 1 - Manipulate
```{r}
sales_by_state_year_tbl <-bike_orderlines_wrangled_city_separated_tbl %>%
select(order_date, total_price, State) %>%
mutate(year = year(order_date)) %>%
group_by(State, year) %>%
summarise(sales = sum(total_price)) %>%
ungroup() %>%
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " ???"))
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title    = "States revenue by year",
x = "", # Override defaults for x and y
y = "Revenue"
)
```
### Step 2 - Visualize
```{r}
sales_by_state_year_tbl%>%
ggplot(aes(x = year, y = sales, fill = State)) +
geom_col() + # Run up to here to get a stacked bar plot
facet_wrap(~ State) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " ???")) +
labs(
title = "Revenue by State and year",
subtitle = "Each product category has an upward trend",
fill = "State" # Changes the legend name
)
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title    = "States revenue by year",
x = "", # Override defaults for x and y
y = "Revenue"
)
```
## Writing Files
### Excel
```{r}
library("writexl")
sales_by_state_year_tbl %>%
write_xlsx("DS_101/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx")
```
### CSV
```{r}
sales_by_state_year_tbl%>%
write_csv("DS_101/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv")
```
### RDS
```{r}
sales_by_state_year_tbl %>%
write_rds("DS_101/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds")
```
# Data Acquisition: Challenge
## importing libraries
```{r}
library(RSQLite)
library(dplyr)
library(httr)
library(glue)
library(jsonlite)
library(keyring)
library(rvest)
library(owmr)
library(stringr)
library(purrr)
library(xopen)
library(stringi)
library(tibble)
```
## Task_1
```{r}
resp = GET("http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=a1e8fec679a9d4e32d525dc165c0af27")
rawToChar(resp$content)
content(resp, as = "text")
# first of all you have to set up your api key
OWM_API_KEY="a1e8fec679a9d4e32d525dc165c0af27"
owmr_settings(OWM_API_KEY)
(Alexandria_Egypt <- search_city_list("Alexandria","EG")) %>%
as.list()
Alexandria_EG_forecast <- get_forecast("London", units = "metric") %>%
owmr_as_tibble()
Alexandria_EG_forecast[, 1:10]
```
## Task_2
```{r}
#Wrap it into a function
url= "https://www.rosebikes.de/fahrr√§der/mtb"
get_bike_data <- function(url) {
html_bike_category <- read_html(url)
# Get the URLs
bike_url_tbl  <- html_bike_category %>%
html_nodes(css = ".catalog-category-bikes__title-text") %>%
html_text()%>%
enframe(name = "No.", value = "Bike.Name")
bike_database_tbl<-bike_url_tbl%>%
mutate(price=html_bike_category%>%
html_nodes(css =".catalog-category-bikes__price-title")%>%
html_text())
}
bike_tableout<-get_bike_data(url)
bike_tableout
saveRDS(bike_tableout,"Data_Acquisition_Challenge.rds")
```
# Data Visualization
## Challenge(2)
### importing libraries
```{r}
library(tidyverse)
library(randomcoloR)
```
### importing data
```{r}
covid_data_tbl <- read_csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
View(covid_data_tbl)
xlab=month.abb[1:12]
ylab=c(2.5,5,7.5,10,12.5,15,17.5,20)
continents=unique(covid_data_tbl$continentExp)
```
### Grouping data
```{r}
grouped1 <- covid_data_tbl %>%
select(month, cases, continentExp) %>%
group_by(month,continentExp) %>%
summarize(
cases = sum(cases),
) %>%
ungroup()
colnames(grouped1)=c("month","continents","cases")
grouped2=data.frame(continents=rep(continents,12),stringsAsFactors = F)
grouped2=grouped2[order(grouped2$continents),]
grouped2=as.data.frame(cbind(grouped2,rep(1:12,length(continents))))
colnames(grouped2)=c("continents","month")
grouped2=merge.data.frame(grouped2,grouped1,all=T)
grouped2[is.na(grouped2)]=0
grouped3<- grouped2%>%
select(month, cases, continents) %>%
group_by(continents) %>%
summarize(
cumulativeCases = cumsum(cases),
) %>%
select(cumulativeCases, continents) %>%
ungroup()
grouped3=as.data.frame(cbind(grouped3,rep(1:12,length(continents))))
colnames(grouped3)=c("cumulativeCases","continents","month")
View(grouped3)
```
### Plotting
```{r}
ggplot(data=grouped3,
aes(x=month,y=cumulativeCases,col=continents),group=continents)+
geom_line()+
scale_x_continuous(name="Year 2020",breaks = 1:12,labels=xlab)+
theme(axis.text.x = element_text(angle=45,hjust=1),axis.text.x.bottom =element_text(xlab))+
scale_y_continuous(expand=c(0,0),name="Cumulative Cases",labels=paste0(ylab,"M"),breaks=10^6*ylab,limits = c(0,17.5e6))+
scale_color_manual(values=randomColor(length(continents)))+
labs(x="Year 2020",
y="Cumulative Cases",
title="COVID-19 confirmed cases worldwide\nAs of 11/02/2020, Europe had more cases than USA")+
theme(plot.title = element_text(face="bold",hjust=0,vjust=2.12,size=7),plot.caption = element_text(face="bold.italic"))
```
LAB_KEY  <- "bahi"
source("build_website.R")
LAB_KEY  <- "bahi"
source("build_website.R")
LAB_KEY  <- "bahi"
source("build_website.R")
## Challenge(2)
### importing libraries
```{r}
library(scales)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(readxl)
library(ggthemes)
library(dplyr)
library(maps)
library(ggmap)
library(maps)
library(mapdata)
library(devtools)
```
### importing table
```{r}
covid_data_tbl<- read_csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
covid_data_tbl%>%
mutate(across(countriesAndTerritories, str_replace_all, "_", " ")) %>%
mutate(countriesAndTerritories = case_when(
countriesAndTerritories == "United Kingdom" ~ "UK",
countriesAndTerritories == "United States of America" ~ "USA",
countriesAndTerritories == "Czechia" ~ "Czech Republic",
TRUE ~ countriesAndTerritories
))
covid_world_mortality_rate_tbl<-covid_data_tbl%>%
mutate(mortalityrate = (deaths/popData2019)*100) %>%
group_by(year,countriesAndTerritories) %>%
summarize(Mortality_Rates = sum(mortalityrate)) %>%
ungroup()%>%
select(countriesAndTerritories,Mortality_Rates,year)
```
### plotting
```{r}
world <-   map_data("world")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region) ,color = "black", fill = "lightgray", size = 0.1
)
covid_world_mortality_rate_countries_tbl<-world%>%
mutate(across(region, str_replace_all, "_", " ") )%>%
mutate(region= case_when(
region==  "UK"~"United_Kingdom" ,
region == "USA"~"United_States_of_America" ,
region == "Czechia"~"Czech_Republic",
TRUE ~ region
))
covid_world_mortality_rate_countries_tbl<-covid_world_mortality_rate_countries_tbl %>%
rename(countriesAndTerritories = region)
#Combined table before plotting
covid_combined_world_mortality_rate <- left_join(covid_world_mortality_rate_countries_tbl,covid_world_mortality_rate_tbl, by = c("countriesAndTerritories"))
ggplot(data = covid_combined_world_mortality_rate) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Mortality_Rates), color= "white")
LAB_KEY = "bahi"
source("build_website.R")
LAB_KEY = "bahi"
source("build_website.R")
LAB_KEY = "bahi"
source("build_website.R")
